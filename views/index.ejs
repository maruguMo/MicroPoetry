<%- include("partials/header.ejs") %>

<div class="menu-bar">
    <!-- btn-group" role="group" aria-label="Buttons" -->
    <button class="btn btn-primary btn-sm btn-dark" id="openFormModal"><i class="fa-regular fa-square-plus"></i> New Poem</button>
    <button class="btn btn-primary btn-sm btn-dark" id="poemarchives"><i class="fas fa-archive" aria-hidden="true"></i> Archived Poems</button>
</div> 
<div id="formModal" class="modal">
    <div class="mymodal-content">
        <div class="ModalTitleBar">NEW POEM
            <span class="close" id="closeFormModal">&times;</span>
        </div>
        <form id="post-form" action="/new-poem" method="POST">
            <div class="mb-3">
                <input class="form-control" id="title" name="title" type="text" placeholder="Title"  required />
            </div>
            <div class="mb-3">
                <select id="form" name="form" required>
                    <!-- Options will be populated from the database -->
                    <% forms.forEach(function(form) { %>
                      <option value="<%= form.Title %>"><%= form.Title %></option>
                    <% }); %>
                  </select>
                <!-- <input class="form-control" name ="Form" type="text" placeholder="Form"  required/> -->
            </div>
            <div  id="editor" class="editor"> </div>
            <input type ="hidden" name="content" id="add-content" />
            <button class="button btn btn-secondary btn-sm" type="reset">Reset</button>
            <button id="saveSubmit" class="button links btn btn-dark btn-sm" type="submit">Submit</button>
        </form>
    </div>
</div>
<h5 id="Posts" class="ModalTitle">New Poems</h5>
<!-- main posts viewer this creates a header bar before the posts are painted -->
<div class="header-bar">
        <div class="header-title">Title</div>
        <div class="header-form px-4">Form</div>
        <div class="header-views">Views</div>
        <div class="header-date">Posted</div>
</div>
<ul id="posts" class ="posts">
    <% posts.forEach(post => { %>
        <!-- <hr> -->
        <li>
            <div class="card post">
                <div class="content py-0">
                    <div class="title position-relative">
                        <a href="#" class=" btn btn-sm view-post position-relative" data-id="<%= post.id %>">
                            <span><%= post.title %></span>
                            <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger badge notify-white">
                              <%= post.comments_count %>
                            </span> 
                        </a>

                    </div>

                    <div class="Poemform px-2">
                        <span data-formName="<%= post.form %>"><%= post.form %></span>
                    </div>
                    <div class="views">
                        <span><%= post.views %></span>
                    </div>
                    <div class="date-posted">
                        <span>
                           <%= new Date(post.timestamp).toLocaleString('en-US', { 
                              year: 'numeric', month: 'short', day: 'numeric' , hour: 'numeric', minute: 'numeric', second: 'numeric' 
                            }) %>
                        </span>                        
                    </div>
                </div>
                <div class="crud btn-group">
                    <button title ="Edit" class="edit-post links btn btn-sm btn-light" data-id="<%= post.id %>">Edit</button>
                    <button title ="Archive" class="archive-post links btn btn-sm btn-light" data-id="<%= post.id %>">Archive</button>
                    <button title ="Delete" class="del-post links btn btn-sm btn-light" data-id="<%= post.id %>">Delete</button>
                </div>
            </div>
        </li>
    <% }); %>
</ul>
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-end pagination-sm">
      <li class="page-item disabled">
        <a class="page-link">Previous</a>
      </li>
      <li class="page-item"><a class="page-link" href="#">1</a></li>
      <li class="page-item"><a class="page-link" href="#">2</a></li>
      <li class="page-item"><a class="page-link" href="#">3</a></li>
      <li class="page-item">
        <a class="page-link" href="#">Next</a>
      </li>
    </ul>
</nav>
  <!-- View Post Modal -->
<div id="myModal" class="modal">
      <div class="mymodal-content mygrid-container ql-container ql-snow" >
          <div class="grid-item row-span ModalTitleBar">VIEW POEM <span class="close" id="closeViewModal">&times;</span></div>
          <div class="grid-item row-span"><h4 id="modal-title"></h4></div>
          <div class="grid-item row-span padleft"><h6 id="modalForm"></h6></div>
          <div class="grid-item over-flow padleft modal-small ql-editor" id = "modal-content" ></div>
          <div class="grid-item over-flow padleft padright poemformback" id="modal-form">Item 4</div>
          <div class="grid-item row-span">
              <button class ="links btn btn-dark btn-sm" id="ExpandCollapse">
                  Add Comment <i id ="plusminus"class="fas fa-plus fa-minus" aria-hidden="true"></i>
              </button>
              <!-- <i class="fa fa-minus" aria-hidden="true"></i> -->
              <div class="commentsContainer collapsible" id="commentsContainer">
                  
                  <form id="comment-form">
                      <input type="hidden" id="comment-post-id" name="postId">
                      <div class="mb-3">
                          <label for="author" class="form-label">Author:</label>
                          <input class="form-control" type="text" id="author" name="author" required>
                      </div>
                      <div class="mb-3">
                          <label for="comment-content" class="form-label">Comment</label>
                          <textarea class="form-control" id="comment-content" name="content" required></textarea>
                      </div>
                      <button type="submit" class="links btn btn-dark btn-sm">Submit</button>
                  </form>
              </div>
          </div>
          <div class="grid-item row-span">
              <hr class="divider">
          </div>
          <div class="grid-item row-span" id="commentsList"></div>
      </div>
</div>  
  <!-- Edit Post Modal -->
<div id="editFormModal" class="modal">
    <div class="mymodal-content">
        <div class="ModalTitleBar">EDIT POEM
            <span class="close" id="closeEditFormModal">&times;</span>
        </div>
        <form id="edit-post-form" action="/edit-post" method="POST">
            <div class="mb-3">
                <input class="form-control" id="edit-title" name="title" type="text" placeholder="Title" required />
            </div>
            <div class="mb-3">
                <select id="edit-form" name="form" required>
                    <!-- Options will be populated from the database -->
                    <% forms.forEach(function(form) { %>
                      <option value="<%= form.Title %>"><%= form.Title %></option>
                    <% }); %>
                </select>
            </div>
            <div id="edit-editor" class="editor"></div>
            <input type="hidden" name="content" id="edit-content" />
            <input type="hidden" name="post_id" id="edit-post-id" />
            <!-- <button class="button btn btn-secondary" type="reset">Reset</button> -->
            <button class="button btn links btn-dark btn-sm" type="submit">Save Changes</button>
        </form>
    </div>
</div>
<!-- Modal for archived posts -->
<div id="archivedPostsModal" class="modal">
    <div class="mymodal-content">
      <div class="ModalTitleBar">
        ARCHIVED POEMS
        <span class="close" id="closeArchivedPostsModal">&times;</span>
      </div>
      <div class="modal-body">
        <div class="post" id="archived-posts-list"></div>
      </div>
    </div>
</div>

<div id="confirmModal" class="modal">
  <div class="confirm-modal">
    <p id="confirm-message">Are you sure you want to delete this poem?</p>
    <div class="confirm-buttons">
      <button id="confirm-delete" class="btn  btn-sm btn-dark">Yes</button>
      <button id="cancel-delete" class="btn  btn-sm btn-dark">Cancel</button>
  </div>
  </div>
</div>

<%- include("partials/footer.ejs") %>

<script type="module">
    
  import { createQuillEditor } from '/js/quillSetUp.js';
  import { showDynamicAlert, delPoem } from '/js/Util.js';

  document.addEventListener(`DOMContentLoaded`, ()=>  {

  //#region viewmodal declarations  
      const viewModal = document.getElementById('myModal');
      const closeViewModalBtn = document.getElementById('closeViewModal');
      const modalTitle = document.getElementById('modal-title');
      const modalForm = document.getElementById('modal-form');
      const modalContent = document.getElementById('mymodal-content');
      const commentsSection = document.getElementById('commentsList');
      const commentForm = document.getElementById('comment-form');
      const commentPostIdInput = document.getElementById('comment-post-id');
    //#endregion
  
  //#region view modal comments toggling declarations
      const expandComments=document.getElementById('ExpandCollapse');
      const div = document.getElementById('commentsContainer');
      const facont=document.getElementById('plusminus');
    //#endregion
    
  //#region Archived modal declarations
      const openArchivedPostsModal = document.getElementById('poemarchives');
      const archivedPostsModal = document.getElementById('archivedPostsModal');
      const closeArchivedPostsModal = document.getElementById('closeArchivedPostsModal');
      const archivedPostsList = document.getElementById('archived-posts-list');
    //#endregion
    
  //#region new poem modal declarations
      const formModal = document.getElementById('formModal');
      const openFormModalBtn = document.getElementById('openFormModal');
      const closeFormModalBtn = document.getElementById('closeFormModal');
      const body = document.querySelector('body');
    //#endregion

  //#region confirm modal declarations
      const confirmModal = document.getElementById('confirmModal');
    //#endregion

  //#region edit modal initialization
      const editmodal= document.getElementById('editFormModal');
    //#endregion
    
  //#region  new post functionality
      const addPostEditor=document.getElementById('#editor');

      //initialize the quill editor when adding a new post
      const newPostQuill = createQuillEditor(document.getElementById('editor'),undefined);
      //show new poem modal
      openFormModalBtn.onclick = ()=> {
        formModal.style.display = 'block';

      }
      const saveBtn = document.getElementById('saveSubmit');
      
      saveBtn.addEventListener('click', ()=>{
        const content=document.getElementById('add-content');
        content.value = newPostQuill.root.innerHTML;
      })
      //when submitted make content of the quill editor go to the hidden element called content
      document.getElementById('post-form').onsubmit = function() {
        document.getElementById('add-content').value = newPostQuill.root.innerHTML;

      }

      closeFormModalBtn.onclick = function() {
        formModal.style.display = 'none';
      }
    //#endregion
    
  //#region VIEW POST FUNCTIONALITY
    /*
      View Post Modal functionality
      View post by clicking on the post link 
      */
    document.querySelectorAll('.view-post').forEach(link => {
      link.addEventListener('click', async function(event) {
        event.preventDefault();
        const postId = link.dataset.id;
        const response = await fetch(`/post/`+ postId);
        const post = await response.json();
        if (post) {
          document.getElementById('modal-title').innerText = post.title;
          const formDesc=await fetchFormDesc(post);
          document.getElementById('modalForm').innerText=`${post.form}`;
          document.getElementById('modal-form').innerHTML = `<h5>This poem is a <em><b> ${post.form} </b></em>. What is a ${post.form} poem?</h5> <hr class="divider"> ${formDesc}`;
          document.getElementById('modal-content').innerHTML = post.content;
          commentPostIdInput.value = postId;
          viewModal.style.display = 'block';
          body.classList.add('modal-open');
          await fetchComments(postId);
        }
      });
      });

      //fetch form description from the database
      async function fetchFormDesc(post){
        const formResponse = await fetch(`/formDescription/${encodeURIComponent(post.form)}`);
        const formDesc = await formResponse.json();
        if (formDesc && formDesc.Description) {
          return formDesc.Description;
        }else{
          return 'No description available';
        }
        return formDesc;
      }
      //fetch comments asynchronously
      async function fetchComments(postId) {
        const response = await fetch(`/comments/${postId}`);
        const comments = await response.json();
        commentsSection.innerHTML = comments.map(comment => `
          <div class="comment">
            <p><strong>${comment.author}</strong> (${new Date(comment.timestamp).toLocaleString()}):</p>
            <p>${comment.content}</p>
          </div>
        `).join('');
      }   
      expandComments.addEventListener('click', ()=>{
        div.classList.toggle('expanded');
        div.classList.toggle('collapsible');
        if (div.classList.contains('expanded')) {
          facont.classList.remove('fa-plus');
          facont.classList.add('fa-minus');
          //div.style.display = 'block';
        } else {
          facont.classList.add('fa-plus');
          facont.classList.remove('fa-minus');
          //div.style.display = 'none';
        }
      });
      //post comments on the view modal
      commentForm.onsubmit = async function(event) {
        event.preventDefault();
        const postId = commentPostIdInput.value;
        const author = document.getElementById('author').value;
        const content = document.getElementById('comment-content').value;
        await fetch('/comments', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ postId, author, content })
        });
        await fetchComments(postId);
        commentForm.reset();
        //toggle the collapse of the coment form on the view post modal
        div.classList.toggle('expanded');
        div.classList.toggle('collapsible');
      };
      // Close the view post modal when clicking the close button
      closeViewModalBtn.onclick = function() {
        viewModal.style.display = 'none';
        window.location.reload(); 
      }
    //#endregion
  
  //#region ARCHIVE POST FUNCTIONALITY  
      //add event listeners to archive buttons
      document.querySelectorAll('.archive-post').forEach(btn =>{
        btn.addEventListener('click', async(event)=>{
          //add code to handle archive
          const postid=btn.getAttribute('data-id')
          //send an AJAX request to archve the post
          fetch(`/archive/${postid}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then( response => {
            if(response.ok){
              showDynamicAlert("Poem archived",btn);
              // alert("Poem archived");
              // await fetch("/",);
              window.location.reload();
            } else {
              //change the btn style to alert
              showDynamicAlert("There was an error archiving this poem",btn);
              // alert("There was an error archiving this poem")
            }
          });
        });
      });
  //#endregion
  
  //#region EDIT POST MODAL FUNCTIONALITY
      const editPostEditor=document.getElementById('edit-editor')
      const quillEdit= createQuillEditor(editPostEditor);
      // Add event listeners to edit buttons
      document.querySelectorAll('.edit-post').forEach(button => {
        button.addEventListener('click', async (event) => {
          const postId = button.getAttribute('data-id');

          // Fetch the post data using AJAX
          const response = await fetch(`/post/${postId}`);
          const post = await response.json();

          // Open the edit modal with fetched post data
          openEditModal(post);
        });
      });      
      function openEditModal(post) {
        document.getElementById('edit-title').value = post.title;
        document.getElementById('edit-form').value = post.form;
        quillEdit.root.innerHTML = post.content;
        document.getElementById('edit-post-id').value = post.id;
        editmodal.style.display='block';
        //document.getElementById('editFormModal').style.display = 'block';
      }
      // Close the edit modal
      document.getElementById('closeEditFormModal').onclick = () => {
        document.getElementById('editFormModal').style.display = 'none';
      };
      // Handle form submission
      document.getElementById('edit-post-form').onsubmit = () => {
        document.getElementById('edit-content').value = quillEdit.root.innerHTML;
      };
//#endregion
  
  //#region ARCHIVAL MODAL FUNCTIONALITY      
      // Open modal to show archived posts
      openArchivedPostsModal.addEventListener('click', async () => {

        archivedPostsList.innerHTML = ''; // Clear existing content
        try {
          
          const response = await fetch('/archived-posts');
          const archivedPosts = await response.json();

          //check if there are any archived posts/poems
          if (archivedPosts.length > 0){

            console.log(archivedPosts);
            archivedPosts.forEach(post => {
              const postDiv = document.createElement('div');
              postDiv.classList.add('archived-post');
              postDiv.classList.add('container');
              postDiv.innerHTML = `
                <div class=" row archiveheader">
                  <span class="col"><b>${post.title}</span></b>
                  <span class="col">Form: ${post.form}</span>
                </div>
                <span class ="padleft">${post.content}</span>
                <button class="unarchive-button links btn btn-dark btn-sm" data-id="${post.id}">Restore</button>
                <hr>
              `;
              archivedPostsList.appendChild(postDiv);
          });

        }else{

          const postsHead=document.createElement("h4");
          // postsHead.classList.add(''); ---add some classes
          postsHead.innerText="There are 0 archived poems";
          archivedPostsList.appendChild(postsHead);

        }
          archivedPostsModal.style.display = 'block';
        } catch (error) {
          console.error('Error fetching archived posts:', error);
        }
      });

      // Close modal
      closeArchivedPostsModal.addEventListener('click', () => {
        archivedPostsModal.style.display = 'none';
        window.location.reload();
      });

      // Unarchive post
      archivedPostsList.addEventListener('click', async (e) => {
        if (e.target.classList.contains('unarchive-button')) {
          const postId = e.target.dataset.id;

          try {
            await fetch(`/unarchive/${postId}`, { method: 'POST' });
            window.location.reload();
            e.target.parentElement.remove();
          } catch (error) {
            console.error('Error unarchiving post:', error);
          }
        }
      });
//#endregion
      
  //#region GENERAL MODAL FUNCTIONALITY
      // Close modal if clicked outside content
      window.addEventListener('click', (e) => {
        if (e.target === archivedPostsModal) {
          archivedPostsModal.style.display = 'none';
        }
      });      

      // Close the modals when clicking outside of them
      window.onclick = function(event) {
        if (event.target == formModal) {
          // formModal.style.display = 'none';
          // window.location.reload(); 
        } else if (event.target == viewModal) {
          viewModal.style.display = 'none';
          window.location.reload(); 
        }else if (event.target == editmodal){
          // editmodal.style.display='none';
          // window.location.reload(); 
        }else if(event.target==confirmModal){
          viewModal.style.display = 'none';
        }
        
      };
//#endregion

  //#region DELETE MODAL FUNCTIONALITY
      //delete poem
      document.querySelectorAll(".del-post").forEach(btn=>{
          btn.addEventListener('click',async(event)=>{
            const postid=btn.getAttribute('data-id')
            //set up and show the delete modal
           
            const confirmDeleteButton = document.getElementById('confirm-delete');
            const cancelDeleteButton = document.getElementById('cancel-delete'); 

            //show the confirm delete modal
            confirmModal.style.display = 'block';
            //add the click event to the delete button modal
            confirmDeleteButton.addEventListener('click', () => {
              // Code to delete the post (e.g., AJAX request)
                delPoem(postid);
                console.log("Post deleted!");
                confirmModal.style.display = 'none';
                showDynamicAlert("Poem deleted!",btn);
                window.location.reload();
            });
    
            //if the user cancels add event to the cancel butto and hide the modal
            cancelDeleteButton.addEventListener('click', () => {
                confirmModal.style.display = 'none';
                showDynamicAlert("Delete cancelled!",btn); 
                window.location.reload();
            });

          });
      });
  //#endregion
  });
  
</script>